{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Polar Language","text":""},{"location":"#welcome-to-the-polar-documentation","title":"Welcome to the Polar documentation \ud83c\udf1f","text":"<p>Polar is a dynamically typed programming language designed to simplify development and enhance your experience when creating games or desktop applications.</p> <p>Polar compiles to IceVM (https://github.com/slavlned/iceVM)</p>"},{"location":"#hello-world","title":"Hello world","text":"<p>You can print text to new line with put function. <pre><code>put('Hello world!')\n</code></pre></p>"},{"location":"#comments","title":"Comments","text":"<p>Here's a way to write comments in your code. <pre><code># Its first comment your ever seen #\n</code></pre></p>"},{"location":"#variables","title":"Variables","text":"<p>Example of variable definition &amp;&amp; all possible types in polar examples. <pre><code>a = 5 # All numbers - is float #\nb = true # Boolean type #\nc = 'hello world' # String type #\nd = reflect 'some.jvm.class' # Jvm Class Type #\ne = lambda() -&gt; { back(123) } # Function Type #\nf = some_existing_function() # Function Type #\ng = some_existing_class() # Class Type #\nk = new some_existing_class() # Class Reference / Object Type #\n</code></pre></p> <p>Important</p> <p>Strings are enclosed in single quotes!</p> <p>Importatnt</p> <p>Polar numbers type - float.</p>"},{"location":"#core-functions","title":"Core Functions","text":"<p>Core Polar functions without libraries. <pre><code>a = scan('some message') # input from user #\nput(a) # print some text to next line #\nputs(a) # print some text to current line #\nb = len(a) # len of string #\nc = number(a) # converts to number #\nd = bool(c)  # converts number or string to bool #\ne = string(d) # converts any type to string #\nsleep(1000) # pause current thread for some time in ms #\n</code></pre></p>"},{"location":"arrays/","title":"Arrays","text":"<p>In Polar arrays is lists. You can dynamically add any elements you want.</p>"},{"location":"arrays/#array-definition","title":"Array definition","text":"<pre><code># You can define array like this: #\na = []\nb = [1, 2, 3]\nc = ['e', 'o', true]\nd = ['hello', 'world', false, 1, 3, 4.2, new A()]\n</code></pre>"},{"location":"arrays/#array-functions","title":"Array functions","text":""},{"location":"arrays/#get-by-index","title":"Get by index","text":"<pre><code>element = a.get(0)\n</code></pre>"},{"location":"arrays/#add","title":"Add","text":"<pre><code>a.add('some_element')\n</code></pre>"},{"location":"arrays/#set-by-index","title":"Set by index","text":"<pre><code>a.set(0, 'some_element')\n</code></pre>"},{"location":"arrays/#insert-by-index","title":"Insert by index","text":"<pre><code>a.insert(7, 'some_element_after')\n</code></pre>"},{"location":"arrays/#size","title":"Size","text":"<pre><code># size of array #\na = [1,2,3,4]\ne = a.size() # 4 #\n</code></pre>"},{"location":"arrays/#contains","title":"Contains","text":"<pre><code>a = [1,2,3,4]\nb = a.contains(4) # true #\nc = a.contains(5) # false #\n</code></pre>"},{"location":"arrays/#del-by-index","title":"Del by index","text":"<pre><code>a.del(index)\n</code></pre>"},{"location":"arrays/#stringify","title":"Stringify","text":"<pre><code>put(a.stringify()) # to string #\n</code></pre>"},{"location":"arrays/#index-of-element","title":"Index of element","text":"<p>if object doesn't exists, returns -1 <pre><code>e = a.index_of('test') # index of element 'test' #\n</code></pre></p>"},{"location":"assertion/","title":"Assertion","text":"<p>You can use assertion for your tests!</p>"},{"location":"assertion/#assert-statement","title":"Assert statement:","text":"<pre><code># will not raise assertion error #\nassert('text' == 'text')\n# will raise assertion error #\nassert(1 == 2)\n</code></pre>"},{"location":"conditional/","title":"Conditional statements/operators","text":""},{"location":"conditional/#about-conditions","title":"About conditions.","text":""},{"location":"conditional/#ifelifelse","title":"If/elif/else","text":"<p>If, elif, else statements. <pre><code>a = scan('enter some lucky numbers: ')\nif (a == '777') {\n    put('Win!')\n} elif (a == '77') {\n    put('Draw!')\n} else {\n    put('Lose!')\n}\n</code></pre></p>"},{"location":"conditional/#logical-operators","title":"Logical operators","text":"<p>Supported logical operators: or, and. <pre><code># condtional operators: #\n# or, and #\nif (1 == 2 or 2 == 3) {\n    # ... #\n}\nelif (1 == 1 and 3 == 3) {\n    # ... #\n}\nelse {\n    # ... #\n}\n</code></pre></p>"},{"location":"conditional/#like-a-variable","title":"Like a variable","text":"<p>You can assign variable with logical expression. <pre><code># you can assign to variable #\n# some logical expression #\na = 5 == 2 or 3 == 3\n</code></pre></p>"},{"location":"conditional/#ternary-expressions","title":"Ternary expressions","text":"<p>Polar supports ternary operator. <pre><code># some ternary expr #\na = true\nb = a ? 'yes' : 'no'\nput('result: ' + b)\n</code></pre></p>"},{"location":"conditional/#matchcasedefault","title":"Match/case/default","text":"<p>Pattern matching example is here: <pre><code>a = scan('enter some number: ')\nmatch (number(a)) {\n    case (123) {\n        put('Wow!')\n    }\n    case (321) {\n        put('Perfect!')\n    }\n    # default can be not used #\n    default {\n        put('Lose')\n    }\n}\n</code></pre></p>"},{"location":"console/","title":"Console library","text":""},{"location":"console/#console-functions","title":"Console functions","text":""},{"location":"console/#clear","title":"Clear","text":"<pre><code>use 'lib.console'\nput('some text')\nConsole.clear() # clears console #\n</code></pre>"},{"location":"function_definition/","title":"Functions declaration","text":""},{"location":"function_definition/#here-is-all-possible-ways-to-define-a-function","title":"Here is all possible ways to define a function","text":""},{"location":"function_definition/#default","title":"Default","text":"<p>Function declaration starts with func keyword. All function arguments are in brackets. You can define functions with assign, before the brace, or without. You can return value with return statement. <pre><code>func some_func() = {\n    put('Hello!')\n}\n\nfunc some_func_without_assign() {\n    put('Hello world!')\n}\n\nfunc some_args_func(name) = {\n    put('Happy birthday, ' + name)\n}\n\nfunc you_can_return_value() = {\n    return 123\n}\n\nfunc you_can_return_value_like_this() = {\n    return(123)\n}\n</code></pre></p>"},{"location":"function_definition/#lambdaanonymous","title":"Lambda/anonymous","text":"<p>You can define multiline lambda function, yay! Closures are supported. <pre><code>func get_lambda() = {\n    a = lambda() -&gt; { put('Hello world') }\n}\nfn = get_lambda()\nfn()\n# you cannot do this: get_lambda()()()... #\n</code></pre></p>"},{"location":"function_definition/#nested-functions","title":"Nested functions","text":"<p>You can create nested functions. Closures are supported. <pre><code>func a() = {\n    func b() = {\n        return(123)\n    }\n    return(b())\n}\n# you dont neeed to convert any type to string,\n    it converts by auto in put function #\nput('some number: ' + a())\n</code></pre></p>"},{"location":"import/","title":"Import","text":""},{"location":"import/#you-can-import-another-polar-file-or-library-with-use-statement","title":"You can import another polar file or library with use statement","text":"<p>[a.polar] <pre><code>func test() {\n    put('hello world!')\n}\nclass Test() {\n    func init() {\n        put('class instance created!')\n    }\n}\n</code></pre> [b.polar] <pre><code>use 'a.polar'\n\ntest()\na = new Test()\n</code></pre></p> <p>Use statement - imports all classes &amp;&amp; functions from another file or lib.</p>"},{"location":"import/#_1","title":"Import","text":"<p>It may happen that there will be two functions or two classes with the same name. To specify access, you can do the following: <pre><code>use 'a.polar'\nuse 'b.polar'\n\n# calling test function from file a.polar #\na:test()\n\n# creating instance of class from file a.polar #\na = new a:Test()\n\n# calling test function from file b.polar #\nb:test()\n\n# creating instance of class from file b.polar #\na = new b:Test()\n</code></pre></p>"},{"location":"loops/","title":"Loops","text":""},{"location":"loops/#here-is-all-possible-loops","title":"Here is all possible loops","text":""},{"location":"loops/#repeat","title":"Repeat","text":"<p>Repeats code given times. <pre><code># repeats code in amount 15 # \nrepeat(15) {\n    put('repeated!')\n}\n</code></pre></p>"},{"location":"loops/#while","title":"While","text":"<p>Repeats code while logical expr is true. <pre><code># while (some_logical_expr) #\ni = 0\nwhile (i &lt; 5) {\n    put('while!')\n    i += 1\n}\n</code></pre></p>"},{"location":"loops/#for","title":"For","text":"<p>Repeats code while variable is greater than, less than, greater or equal than, etc... <pre><code># doing some code while condition from the\nright side is true #\nfor (i = 0, i &lt; 10) {\n    put('For!')\n    i += 1\n}\n</code></pre></p>"},{"location":"loops/#each","title":"Each","text":"<p>Looks over every element from an array. arrays explained in arrays <pre><code># each loop #\na = [1,2,3,4,5,6,7,8]\n# looks over every element #\neach (element, a) {\n    put(element)\n}\n</code></pre></p>"},{"location":"loops/#breaknext","title":"Break/Next","text":"<p>break statement - breaks current loop. next statement - jumps to new loop iteration. <pre><code>a = 5\nwhile (true) {\n    if (a == 1) {\n        next\n    }\n    else {\n        a -= 1\n        if (a &lt;= 0) {\n            break\n        }\n    }\n}\n</code></pre></p>"},{"location":"maps/","title":"Maps","text":"<p>Map = dictionary.</p>"},{"location":"maps/#map-definition","title":"Map definition","text":"<pre><code># You can define map like this: #\na = {}\nb = {'hello': 'world'}\nc = {true: false, '123': 1, 'false': 7}\n</code></pre>"},{"location":"maps/#map-functions","title":"Map functions","text":""},{"location":"maps/#get-by-key","title":"Get by key","text":"<pre><code>element = a.get('key')\n</code></pre>"},{"location":"maps/#set-value-to-key","title":"Set value to key","text":"<pre><code>a.set('key', 123)\n</code></pre>"},{"location":"maps/#has-key","title":"Has key","text":"<pre><code>a = {'test': 222}\nb = a.has_key('test') # true #\nc = a.has_key('test2') # false #\n</code></pre>"},{"location":"maps/#has-value","title":"Has value","text":"<pre><code>a = {'test': 222}\nb = a.has_value(222) # true #\nc = a.has_value(333) # false #\n</code></pre>"},{"location":"maps/#size","title":"Size","text":"<pre><code># size of map #\na = {1: 2, 3: 4}\ne = a.size() # 2 #\n</code></pre>"},{"location":"maps/#keys","title":"Keys","text":"<p>Returns array of keys <pre><code>a = {1: 2, 3: 4}\nb = a.keys() # [1, 3] #\n</code></pre></p>"},{"location":"maps/#values","title":"Values","text":"<p>Returns array of values <pre><code>a = {1: 2, 3: 4}\nb = a.values() # [2, 4] #\n</code></pre></p>"},{"location":"maps/#stringify","title":"Stringify","text":"<p>Map to string <pre><code>b = a.stringify()\n</code></pre></p>"},{"location":"maps/#del","title":"Del","text":"<p>Delete value by key <pre><code>a = {'test': 1, 'test2': 2}\na.del('test')\nput(a) # {'test2': 2}\n</code></pre></p>"},{"location":"math/","title":"Math library","text":""},{"location":"math/#math-library-modstatic-variables","title":"Math library mod(static) variables","text":"<pre><code>mod Pi = 3.1415926535897\nmod Infinity = 1/0\nmod NegativeInfinity = -1/0\nmod NaN = 0/0\nmod E = 2.718\nmod Ln2 = 0.6931\nmod Ln10 = 2.3026\nmod Log2E = 1.4427\nmod Log10E = 0.4343\n</code></pre>"},{"location":"math/#math-library-fucntions","title":"Math library fucntions:","text":"<pre><code>use 'lib.math'\na = Math.tan(10) # tan #\nb = Math.cos(10) # cos #\nc = Math.sin(10) # sin #\nd = Math.atan(10) # atan #\ne = Math.pow(2) # pow #\nf = Math.sqrt(4) # sqrt #\n</code></pre>"},{"location":"oop/","title":"OOP","text":""},{"location":"oop/#polar-have-very-small-oop-aspect-because-of-our-view-of-polar-feauture","title":"Polar have very small OOP aspect, because of our view of Polar Feauture","text":""},{"location":"oop/#classes","title":"Classes","text":"<p>Classes is a big theme. Here is very simple example of class definition: <pre><code>class Cat() = {\n    func purr() = {\n        put('purr!')\n    }\n}\nnew Cat().purr()\n</code></pre></p>"},{"location":"oop/#example-with-constructor","title":"Example with constructor","text":"<p>You can create classes with constructor. <pre><code>class Cat(name) = {\n    func purr() = {\n        # you can access class members with \"this\" variable #\n        # which refers to current Class Reference\n        put('Purrr... ' + this.name)\n    }\n}\n\nsome_cat = new Cat('Murka')\nsome_cat.purr()\n</code></pre></p>"},{"location":"oop/#example-with-modulestatic-functions-and-variables","title":"Example with module(static) functions and variables","text":"<p>Static variables &amp; functions are supported <pre><code>class Math() = {\n    mod PI = 3.14\n    mod func circumference(radius) = {\n        back(2*Math.PI*radius)\n    }\n}\n</code></pre></p>"},{"location":"oop/#example-with-init-function","title":"Example with init function","text":"<p>You can use init function  <pre><code>class Dog(name) = {\n    func init() = {\n        put(this.name + ' is alive!')\n    }\n\n    func woof() = {\n        put(this.name + ': woof!')\n    }\n}\n\ndog = new Dog()\n</code></pre> Init function calling after object creating</p>"},{"location":"pipe/","title":"Pipe Operator","text":""},{"location":"pipe/#pipe-operator-example","title":"Pipe operator example:","text":"<pre><code>func c() = {\n    back('hello')\n}\nfunc b(value, additional) = {\n    back(value + additional)\n}\nfunc a(some_val) = {\n    put(some_val())\n}\nc() |&gt; b(' world') |&gt; a()\n</code></pre> <p>By the pipe operator you passing last function result to next function in right side of pipe operator. You can add additional arguments to function like in example [b(' world')].</p>"},{"location":"random/","title":"Random library","text":""},{"location":"random/#random-functions","title":"Random functions","text":""},{"location":"random/#random-number","title":"Random number","text":"<pre><code>use 'lib.random'\na = Random.number(1, 20, true) # should be integer random number #\nb = Random.number(1, 20, false) # should be float random number #\n</code></pre>"},{"location":"random/#random-choice","title":"Random choice","text":"<pre><code>use 'lib.random'\narr = [1, 2, 3, 4]\na = Random.choice(arr) # chooses random value from array #\n</code></pre>"},{"location":"reflection/","title":"Reflection","text":""},{"location":"reflection/#jvm-reflection-you-can-use-jvm-classes-in-your-polar-scripts","title":"Jvm Reflection - you can use Jvm Classes in your polar scripts","text":"<p>Here's example. <pre><code># simple example #\na = reflect 'java.util.Random'\n</code></pre></p> <p>Important</p> <p>You cannot use classes with constructors, to use Jvm classes with constructor - write a wrapper.</p> <p>Important</p> <p>You can contact to JvmClass by method calling, you can't set the fields.</p>"},{"location":"reflection/#juse-statement","title":"JUse statement","text":"<p>You can import jvm class to jvm  from class file by juse statement.  <pre><code># \nyou can import jvm class to jvm \nfrom class file by juse statement \n#\n\njuse 'currentenv\\\\local\\\\path\\\\to\\\\jvm\\\\class'\n</code></pre></p>"},{"location":"safety/","title":"Safety","text":""},{"location":"safety/#safe-example","title":"Safe example","text":"<pre><code>safe {\n    raise 'some error'\n} handle(e) {\n    put('i cought some error: ' + e)\n}\n</code></pre> <p>Safe statement: In this statement, all code is executed safely; if an error occurs, the error is passed to the handle statement.</p> <p>Handle statement: You can handle errors or yourself raises (by the raise statement) from safe statement.</p> <p>Raise statement: Raises any object. If it didn't catch by handle, no error will be thrown.</p>"},{"location":"strings/","title":"Strings lib","text":""},{"location":"strings/#strings-lib-functions","title":"Strings lib functions","text":"<pre><code># importing strings #\nuse 'lib.strings'\n</code></pre>"},{"location":"strings/#character-at-index","title":"Character at index","text":"<pre><code>a = String.at('hello', 1)\n</code></pre>"},{"location":"strings/#split-text","title":"Split text","text":"<pre><code>b = Strings.split('h,e,l,l,o', ',') # ['h','e','l','l','o'] #\n</code></pre>"},{"location":"strings/#replace-some-part-to-another-in-text","title":"replace some part to another in text","text":"<pre><code>c = Strings.replace('hello some', 'some', 'world')\n</code></pre>"},{"location":"strings/#returns-text-in-uppercase","title":"returns text in uppercase","text":"<pre><code>d = Strings.upper('hello')\n</code></pre>"},{"location":"strings/#returns-text-in-lowercase","title":"returns text in lowercase","text":"<pre><code>e = Strings.lower('world')\n</code></pre>"},{"location":"strings/#formatting-text","title":"formatting text","text":"<pre><code>f = Strings.format('Hello {0.0}', ['Bob!']) # Hello Bob #\n</code></pre>"},{"location":"tasks/","title":"Tasks library","text":"<p>Tasks - multithreading for Polar.</p>"},{"location":"tasks/#example","title":"Example","text":"<p><pre><code>use 'lib.tasks'\n\nfunc test() {\n    put('thread')\n    sleep(1000)\n}\n\nTasks.exec(test, [])\n</code></pre> first arguments - its a function link. second argument - its an array of arguments for function call.</p> <p>Tasks.exec - creates java Thread under the hood.</p>"},{"location":"window2d/","title":"Window2D library","text":"<p>Window2D - library based on Gdx framework for graphics.</p> <p>To create window - use Window2DProvider. <pre><code>use 'lib.window2d'\n\nwindow = Window2DProvider.provide()\n</code></pre></p> <p>Now you can start your window, but anything you wrote under this line will not work because of window core loop.. <pre><code>use 'lib.window2d'\n\nfunc on_start() {\n    put('Window started')\n}\n\nfunc on_update() {\n    put('Window rerender')\n}\n\nwindow.start(960, 640, 'title', on_start, on_update)\n</code></pre> window.start - creates window width width, height, title. This function also need start handler function &amp;&amp; update handler function in arguments. In example, we creating icon with width: 960, height: 640, title: title, on_start_function: on_start, on_rerender_function: on_update. on_start_function - called when window has been successfully started. onon_rerender_function - called when window rerender, here you can render your images.</p> <p>Lets render our first image. <pre><code>use 'lib.window2d'\n\nwindow = Window2DProvider.provide()\nsprites = {}\nwindow.start(960, 640, 'test_title', on_start, on_update)\n\nfunc on_start() {\n    sprites.set(\n        'test',\n        window.create_sprite(\n            'E:\\6f4c5d3c1fbc4598b8639967ff33.jpg'\n        )\n    )\n}\n\nfunc on_update() {\n    sprite = sprites.get('test')\n    sprite.setX(100)\n    sprite.setY(200)\n    sprite.setSize(150, 100)\n    window.draw(sprite)\n}\n</code></pre> window.creeate_sprite - creating sprite from image path. Now you can render it by window.draw. sprite class - com.badlogic.gdx.graphics.g2d.Sprite. Read gdx documentation for more information.</p>"}]}